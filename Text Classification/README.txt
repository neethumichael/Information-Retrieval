Read me for Homework 6 - Text Classification
Partners in collaboration:
1)Neethu Prasad (NUID: 001664907)
2)Chinmayee Vaidya (NUID: 001766160)

1) Instructions For Compiling and Running the code
   Make sure you are in the source code folder.
   a) Intructions for compiling the code:

        -> javac -Xlint nbtrain.java
        -> javac -Xlint nbtest.java
   b) Intrutions for running the code:

        -> java nbtrain train modal.txt
        -> java nbtest modal.txt test  prediction_test.txt
        -> java nbtest modal.txt dev prediction_dev.txt

2) About the files in the folder:
   Neethu_Chinmayee_CS6200_HW6.zip contains the followig
     a) Source code                       :  contains the java files for the code.
     b) highest_ratio_negative_to_postive :  A list of the 20 terms with the highest (log) ratio of negative to positive weight.
     c) highest_ratio_positive_to_negative:  A list of the 20 terms with the highest (log) ratio of positive to negative weight.
     d) predictions_dev_data              :  predictions file for the development data
     e) predictions_test_data             :  predictions file for the test data.
     f) Output files                      :  Has all the output files
     g) Input                             :  Contains textcat directory which has the dev,test and train data
     g) README.txt

3) Result:
   80% of the Positive dev data and 79% of the negative dev data are correctly classified.Besides implementing
   unigrams that occur five times or more, we have used only the unigrams with length greater than or equal to 3.
   Also we have filtered the unigrams(words) with special character alone.

4) Implementation

 i)  nbtrain.java reads the pos and neg folders (which contains text files with positive and negative movie reviews)
     of textcat directory and creates a modal file in the following format:
     Sl.no     |Class          |Prior          |Word           |log(Probablity)
     where log(Probablity) is the log conditional probablity for each word in modal.file
 ii) nbtrain.java also outputs the
     A list of terms with the highest (log) ratio of positive to negative weight.
     A list of terms with the highest (log) ratio of negative to positive weight.
iii) nbtest.java reads the modal file created by nbtrain.java and calculates both negative and positive score for
     words in test/dev data.
 iv) For dev data, nbtest.java validates the correctness
     For test data, nbtest.java classifies the files into neg/pos classes according to the score calculated with the
     help of conditional probablities generated by training train data in nbtrain.java
